{"version":3,"sources":["Features/Weather/reducer.ts","Features/Weather/saga.ts","store/sagas.js","Features/Metrics/reducer.ts","utils/constants.tsx","store/reducers.ts","store/index.ts","components/Chip.tsx","Features/Weather/Weather.tsx","components/Header.tsx","components/Wrapper.tsx","components/MultipleSelect.tsx","utils/utils.tsx","Features/Metrics/Metrics.tsx","components/MeasurementsChart.tsx","components/MeasureCard.tsx","components/AlertParagraph.tsx","utils/CustomHooks.ts","components/Dashboard.tsx","App.tsx","index.jsx"],"names":["slice","createSlice","name","initialState","temperatureinCelsius","temperatureinFahrenheit","description","locationName","reducers","weatherDataRecevied","state","action","payload","Number","toFixed","weatherApiErrorReceived","reducer","actions","apiErrorReceived","watchApiError","call","toast","error","takeEvery","WeatherActions","type","root","spawn","weatherSaga","Color","metrics","selectedMetrics","metricsReceived","metricsApiErrorReceived","alert","weather","weatherReducer","metricsReducer","combineReducers","withStyles","theme","background","palette","secondary","main","label","color","primary","Chip","client","createClient","url","getWeather","value","Weather","getLocation","useGeolocation","latLong","latitude","longitude","dispatch","useDispatch","useSelector","useQuery","query","variables","result","fetching","data","useEffect","message","getWeatherForLocation","LinearProgress","WeatherContainer","styled","display","justifyContent","breakpoints","up","down","paddingBottom","TitleContainer","height","alignItems","textAlign","paddingTop","useStyles","makeStyles","title","lineHeight","classes","AppBar","position","Toolbar","Grid","container","item","xs","md","Typography","variant","className","wrapper","Wrapper","children","formControl","minWidth","inputLabel","chips","flexWrap","chip","margin","backgroundColor","MultipleSelect","values","changeCallback","useState","multipleSelectValue","setMultipleSelectValue","FormControl","InputLabel","id","Select","labelId","multiple","onChange","event","target","input","Input","renderValue","selected","map","MenuItem","subscriptionClient","SubscriptionClient","reconnect","graphqlClient","exchanges","defaultExchanges","subscriptionExchange","forwardSubscription","operation","request","getColor","metric","Math","floor","random","toString","selectContainer","marginBottom","marginTop","circularProgressWrapper","getMetrics","Metrics","Box","CircularProgress","CustomTooltip","active","length","date","Date","milliseconds","toUTCString","metricPelements","forEach","point","metricLabel","push","style","padding","borderRadius","defaultProps","metricUnits","unit","render","measuresByUnit","min","reduce","acc","curr","metricsByUnit","filter","yAxisToHide","find","ResponsiveContainer","LineChart","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","interval","dataKey","dy","tickSize","tick","fontSize","Tooltip","content","index","Line","stroke","dot","yAxisId","isAnimationActive","YAxis","hide","tickCount","angle","dx","cardsConteiner","cardContent","paddingRight","paddingLeft","MeasureCard","measure","sm","Card","CardContent","noWrap","lastMeasure","AlertParagraph","bodyVariant","headerVariant","header","body","useSelectedMetricsWithLastMeasure","selectedMetricsWithLastMeasure","setSelectedMetricsWithLastMeasure","selectedMetricsStrings","selectedMetricsWithLastMeasureStrings","selectedMetricsSet","Set","removedElementAsSet","setA","setB","difference","elem","delete","setDifference","metricToRemove","getSelectedMetrics","dashboardContainer","batch","getTime","at","Dashboard","useSubscription","newMeasurementsSubResult","chartData","setChartData","setMetricUnits","multipleMeasurementsInput","metricName","useGetMultipleMeasurements","measurementsResponse","fetchingMeasurements","measurementsError","multipleMeasurementsResult","subscriptionResponse","subscriptionError","getMultipleMeasurements","auxMetricUnits","i","measurements","createMetricUnitsArray","limit","chartDataItems","count","k","getUTCHours","getUTCMinutes","createChartDataItems","newMetric","newMeasurement","newChartData","filters","measureToAdd","selectedMetric","filterNewMeasurement","newMetricInCurrentSelection","currentMetricLastMeasure","indexOfCurrentLastMeasure","indexOf","selectedMetricsWithLastMeasureReplacement","splice","chart","MeasurementsChart","showLoading","subscriptionLayout","spacing","Container","maxWidth","sx","pt","pb","store","composeEnhancers","composeWithDevTools","sagaMiddleware","createSagaMiddleware","middlewares","applyMiddleware","createStore","run","sagas","createTheme","default","App","CssBaseline","Header","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.93825cde.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from 'redux-starter-kit';\n\nexport type WeatherForLocation = {\n  description: string;\n  locationName: string;\n  temperatureinCelsius: number;\n};\n\nexport type ApiErrorAction = {\n  error: string;\n};\n\nconst initialState = {\n  temperatureinCelsius: 0,\n  temperatureinFahrenheit: 0,\n  description: '',\n  locationName: '',\n};\n\nconst toF = (c: number) => Number(((c * 9) / 5 + 32).toFixed(2));\n\nconst slice = createSlice({\n  name: 'weather',\n  initialState,\n  reducers: {\n    weatherDataRecevied: (state, action: PayloadAction<WeatherForLocation>) => {\n      const { description, locationName, temperatureinCelsius } = action.payload;\n      state.temperatureinCelsius = temperatureinCelsius;\n      state.temperatureinFahrenheit = toF(temperatureinCelsius);\n      state.description = description;\n      state.locationName = locationName;\n    },\n    // eslint-disable-next-line no-unused-vars\n    weatherApiErrorReceived: (state, action: PayloadAction<ApiErrorAction>) => state,\n  },\n});\n\nexport const { reducer } = slice;\nexport const { actions } = slice;\n","import { takeEvery, call } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nimport { PayloadAction } from 'redux-starter-kit';\nimport { actions as WeatherActions, ApiErrorAction } from './reducer';\n\nfunction* apiErrorReceived(action: PayloadAction<ApiErrorAction>) {\n  yield call(toast.error, `Error Received: ${action.payload.error}`);\n}\n\nexport default function* watchApiError() {\n  yield takeEvery(WeatherActions.weatherApiErrorReceived.type, apiErrorReceived);\n}\n","import { spawn } from 'redux-saga/effects';\nimport weatherSaga from '../Features/Weather/saga';\n\nexport default function* root() {\n  yield spawn(weatherSaga);\n}\n","import { createSlice, PayloadAction } from 'redux-starter-kit';\nimport { Metric } from './Interfaces';\n\ntype MetricsState = {\n  metrics: string[];\n  selectedMetrics: Metric[];\n};\n\nconst initialState: MetricsState = {\n  metrics: ['flareTemp', 'injValveOpen', 'oilTemp', 'casingPressure', 'tubingPressure', 'waterTemp'],\n  selectedMetrics: [],\n};\n\nexport type ApiErrorAction = {\n  error: string;\n};\n\nconst slice = createSlice({\n  name: 'metrics',\n  initialState,\n  reducers: {\n    metricsReceived: (state, action: PayloadAction<string[]>) => {\n      state.metrics = action.payload;\n    },\n    selectedMetrics: (state, action: PayloadAction<Metric[]>) => {\n      state.selectedMetrics = action.payload;\n    },\n    // eslint-disable-next-line no-unused-vars\n    metricsApiErrorReceived: (state, action: PayloadAction<ApiErrorAction>) => {\n      alert(action.payload.error);\n    },\n  },\n});\n\nexport const { reducer } = slice;\nexport const { actions } = slice;\n","/* eslint-disable no-unused-vars */\nconst WS_URL = 'wss://react.eogresources.com/graphql';\nconst API_URL = 'https://react.eogresources.com/graphql';\n\n// eslint-disable-next-line no-shadow\nexport enum Color {\n  flareTemp = 'green',\n  injValveOpen = 'blue',\n  oilTemp = 'red',\n  casingPressure = 'black',\n  tubingPressure = 'pink',\n  waterTemp = 'purple',\n}\n\nexport { WS_URL, API_URL };\n","import { reducer as weatherReducer } from '../Features/Weather/reducer';\nimport { reducer as metricsReducer } from '../Features/Metrics/reducer';\n\nexport default {\n  weather: weatherReducer,\n  metrics: metricsReducer,\n};\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport { combineReducers } from 'redux-starter-kit';\nimport sagas from './sagas';\nimport reducers from './reducers';\n\nconst reducer = combineReducers(reducers);\nexport type IState = ReturnType<typeof reducer>;\n\nexport default () => {\n  const composeEnhancers = composeWithDevTools({});\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = applyMiddleware(sagaMiddleware);\n  const store = createStore(reducer, composeEnhancers(middlewares));\n\n  sagaMiddleware.run(sagas);\n\n  return store;\n};\n","import Chip from '@material-ui/core/Chip';\nimport { withStyles, Theme } from '@material-ui/core/styles';\n\nconst cardStyles = (theme: Theme) => ({\n  root: {\n    background: theme.palette.secondary.main,\n  },\n  label: {\n    color: theme.palette.primary.main,\n  },\n});\nexport default withStyles(cardStyles)(Chip);\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Provider, createClient, useQuery } from 'urql';\nimport { useGeolocation } from 'react-use';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { actions } from './reducer';\nimport Chip from '../../components/Chip';\nimport { IState } from '../../store';\n\nconst client = createClient({\n  url: 'https://react.eogresources.com/graphql',\n});\n\nconst query = `\nquery($latLong: WeatherQuery!) {\n  getWeatherForLocation(latLong: $latLong) {\n    description\n    locationName\n    temperatureinCelsius\n  }\n}\n`;\n\nconst getWeather = (state: IState) => {\n  const { temperatureinFahrenheit, description, locationName } = state.weather;\n  return {\n    temperatureinFahrenheit,\n    description,\n    locationName,\n  };\n};\n\nexport default () => {\n  return (\n    <Provider value={client}>\n      <Weather />\n    </Provider>\n  );\n};\n\nconst Weather = () => {\n  const getLocation = useGeolocation();\n  // Default to houston\n  const latLong = {\n    latitude: getLocation.latitude || 29.7604,\n    longitude: getLocation.longitude || -95.3698,\n  };\n  const dispatch = useDispatch();\n  const { temperatureinFahrenheit, description, locationName } = useSelector(getWeather);\n\n  const [result] = useQuery({\n    query,\n    variables: {\n      latLong,\n    },\n  });\n  const { fetching, data, error } = result;\n  useEffect(() => {\n    if (error) {\n      dispatch(actions.weatherApiErrorReceived({ error: error.message }));\n      return;\n    }\n    if (!data) return;\n    const { getWeatherForLocation } = data;\n    dispatch(actions.weatherDataRecevied(getWeatherForLocation));\n  }, [dispatch, data, error]);\n\n  if (fetching) return <LinearProgress />;\n\n  return <Chip label={`Weather in ${locationName}: ${description} and ${temperatureinFahrenheit}°`} />;\n};\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid, styled } from '@material-ui/core';\nimport Weather from '../Features/Weather/Weather';\n\nconst WeatherContainer = styled('div')(({ theme }) => ({\n  display: 'flex',\n  justifyContent: 'center',\n  [theme.breakpoints.up('md')]: {\n    justifyContent: 'end',\n  },\n  [theme.breakpoints.down('sm')]: {\n    paddingBottom: '1rem',\n  },\n}));\n\nconst TitleContainer = styled('div')(({ theme }) => ({\n  display: 'flex',\n  height: '100%',\n  alignItems: 'center',\n  [theme.breakpoints.down('sm')]: {\n    justifyContent: 'center',\n    textAlign: 'center',\n    paddingTop: '.6rem',\n    paddingBottom: '.5rem',\n  },\n}));\n\nconst useStyles = makeStyles({\n  title: {\n    lineHeight: 'normal',\n  },\n});\n\nexport default () => {\n  const classes = useStyles();\n\n  // eslint-disable-next-line quotes\n  const name = \"Gerardo's\";\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <Grid container>\n          <Grid item xs={12} md={6}>\n            <TitleContainer>\n              <Typography variant=\"h6\" color=\"inherit\" className={classes.title}>\n                {name}\n                EOG React Visualization Assessment\n              </Typography>\n            </TitleContainer>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <WeatherContainer>\n              <Weather />\n            </WeatherContainer>\n          </Grid>\n        </Grid>\n      </Toolbar>\n    </AppBar>\n  );\n};\n","import React, { ReactChildren, ReactChild } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n  wrapper: {\n    height: '100vh',\n  },\n});\n\ninterface WrapperProps {\n  children: ReactChild | ReactChildren;\n}\n\nconst Wrapper = ({ children }: WrapperProps) => {\n  const classes = useStyles();\n  return <div className={classes.wrapper}>{children}</div>;\n};\n\nexport default Wrapper;\n","import { InputLabel, FormControl, Select, Input, MenuItem, makeStyles, Chip } from '@material-ui/core';\nimport React, { useState } from 'react';\n\ntype MultipleSelectProps = {\n  values: string[];\n  changeCallback: Function;\n};\n\nconst useStyles = makeStyles({\n  formControl: {\n    minWidth: 180,\n  },\n  inputLabel: {\n    color: 'black',\n  },\n  chips: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  chip: {\n    margin: 2,\n    backgroundColor: 'white',\n  },\n});\n\nconst MultipleSelect = ({ values = ['No metrics'], changeCallback }: MultipleSelectProps) => {\n  const [multipleSelectValue, setMultipleSelectValue] = useState<string[]>([]);\n  const classes = useStyles();\n\n  const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setMultipleSelectValue(event.target.value as string[]);\n    changeCallback(event.target.value as string[]);\n  };\n\n  return (\n    <FormControl className={classes.formControl}>\n      <InputLabel className={classes.inputLabel} id=\"mutiple-metric-label\">\n        Select metric...\n      </InputLabel>\n      <Select\n        labelId=\"mutiple-metric-label\"\n        id=\"mutiple-metric\"\n        multiple\n        value={multipleSelectValue}\n        onChange={handleChange}\n        input={<Input />}\n        renderValue={(selected) => (\n          <div className={classes.chips}>\n            {(selected as string[]).map((value) => (\n              <Chip key={`multipleSelect_${value}`} label={value} className={classes.chip} />\n            ))}\n          </div>\n        )}\n      >\n        {values.map((value: string) => (\n          <MenuItem key={`menuItem_${value}`} value={value}>\n            {value}\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  );\n};\n\nexport default MultipleSelect;\n","// GraphQL\nimport { SubscriptionClient } from 'subscriptions-transport-ws';\nimport { createClient, defaultExchanges, subscriptionExchange } from 'urql';\n\n// App stuff\nimport { MeasurementResponse, MeasurementsChartItem, Metric, MetricLine } from '../Features/Metrics/Interfaces';\nimport { API_URL, Color, WS_URL } from './constants';\n\nconst subscriptionClient = new SubscriptionClient(WS_URL, {\n  reconnect: true,\n});\n\nconst graphqlClient = createClient({\n  url: API_URL,\n  exchanges: [\n    ...defaultExchanges,\n    subscriptionExchange({\n      forwardSubscription: (operation) => subscriptionClient.request(operation),\n    }),\n  ],\n});\n\n/**\n * @returns Difference/Complement between setA and setB.\n */\nconst setDifference = (setA: Set<string>, setB: Set<string>) => {\n  const difference = new Set(setA);\n  setB.forEach((elem) => {\n    difference.delete(elem);\n  });\n  return difference;\n};\n\n/**\n *\n * @param data Measures array.\n * @param newMeasurement New measure coming from Subscription.\n * @param {Metric[]} filters Currently selected metrics.\n * @returns Measures array included latest measure from Subscription.\n */\nconst filterNewMeasurement = (\n  data: MeasurementsChartItem[],\n  newMeasurement: MeasurementsChartItem,\n  filters: Metric[],\n) => {\n  const measureToAdd: MeasurementsChartItem = {\n    id: newMeasurement.id,\n    at: newMeasurement.at,\n    milliseconds: newMeasurement.milliseconds,\n  };\n  // Add new measure for every selected metric.\n  filters.forEach((selectedMetric) => {\n    measureToAdd[selectedMetric.metric] = newMeasurement[selectedMetric.metric];\n  });\n  return [...data, measureToAdd];\n};\n\n/**\n * @param multipleMeasurementsResult Array measures returned from the API.\n * @param {number} limit This paramater is used to limit the number of points to render in the chart. Rendering all points\n * coming frmo the API makes the chart looks non-aesthetic since they are too many.\n * @returns Data array in proper format to populate Recharts chart.\n */\n// eslint-disable-next-line no-unused-vars\nconst createChartDataItems = (multipleMeasurementsResult: MeasurementResponse[], limit: number) => {\n  const chartDataItems: MeasurementsChartItem[] = [];\n\n  if (multipleMeasurementsResult?.length !== 0) {\n    let date;\n    let count = 0;\n\n    for (let i = 0; i < multipleMeasurementsResult?.length; i += 1) {\n      for (\n        let k =\n          multipleMeasurementsResult[i].measurements.length - limit > 0\n            ? multipleMeasurementsResult[i].measurements.length - limit\n            : multipleMeasurementsResult[i].measurements.length - limit;\n        k < multipleMeasurementsResult[i].measurements.length;\n        k += 1\n      ) {\n        chartDataItems[count] = chartDataItems[count] || {};\n        chartDataItems[count][multipleMeasurementsResult[i].metric] =\n          multipleMeasurementsResult[i].measurements[k].value;\n        date = new Date(multipleMeasurementsResult[i].measurements[k].at);\n        chartDataItems[count].at = `${date.getUTCHours()}:${date.getUTCMinutes()}`;\n        chartDataItems[count].milliseconds = multipleMeasurementsResult[i].measurements[k].at;\n        count += 1;\n      }\n      count = 0;\n    }\n  }\n\n  return chartDataItems;\n};\n\n/**\n * @param multipleMeasurementsResult Array measures returned from the API.\n * @returns Array of elements which contain metric name, unit and color used in the chart.\n */\nconst createMetricUnitsArray = (multipleMeasurementsResult: MeasurementResponse[]) => {\n  const auxMetricUnits: MetricLine[] = [];\n\n  if (multipleMeasurementsResult?.length !== 0) {\n    for (let i = 0; i < multipleMeasurementsResult?.length; i += 1) {\n      // eslint-disable-next-line no-debugger\n      //   debugger;\n      auxMetricUnits.push({\n        metric: multipleMeasurementsResult[i].metric,\n        unit: multipleMeasurementsResult[i].measurements[0].unit,\n        color: getColor(multipleMeasurementsResult[i].metric),\n        min: 0,\n        render: true,\n      });\n    }\n  }\n\n  return auxMetricUnits;\n};\n\n/**\n * @param metric Color's metric.\n * @returns A color in string format.\n */\nconst getColor = (metric: string) => {\n  return Color[metric as keyof typeof Color] || `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n};\n\nexport { filterNewMeasurement, setDifference, graphqlClient, getColor, createMetricUnitsArray, createChartDataItems };\n","import React, { useEffect } from 'react';\nimport { Provider, createClient, useQuery } from 'urql';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Box, CircularProgress, makeStyles } from '@material-ui/core';\nimport { actions } from './reducer';\nimport { IState } from '../../store';\nimport MultipleSelect from '../../components/MultipleSelect';\nimport { getColor } from '../../utils/utils';\n\nconst useStyles = makeStyles({\n  selectContainer: {\n    marginBottom: 20,\n    marginTop: 20,\n  },\n  circularProgressWrapper: {\n    textAlign: 'center',\n    height: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nconst client = createClient({\n  url: 'https://react.eogresources.com/graphql',\n});\n\nconst getMetricsQuery = `\nquery {\n  getMetrics\n}\n`;\n\nconst getMetrics = (state: IState) => {\n  const { metrics } = state.metrics;\n  return {\n    metrics,\n  };\n};\n\nconst Metrics = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const { metrics } = useSelector(getMetrics);\n\n  const selectedValuesHandler = (values: string[]) => {\n    dispatch(\n      actions.selectedMetrics(\n        values.map((value) => {\n          return {\n            metric: value,\n            color: getColor(value),\n          };\n        }),\n      ),\n    );\n  };\n\n  const [result] = useQuery({\n    query: getMetricsQuery,\n  });\n  const { fetching, data, error } = result;\n\n  useEffect(() => {\n    if (error) {\n      dispatch(actions.metricsApiErrorReceived({ error: `${error.message}\\nUsing default metrics for selection` }));\n      return;\n    }\n    if (!data) return;\n    dispatch(actions.metricsReceived(data.getMetrics));\n  }, [dispatch, data, error]);\n\n  if (fetching) {\n    return (\n      <Box className={classes.circularProgressWrapper}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  return (\n    <Box className={classes.selectContainer}>\n      <MultipleSelect values={metrics} changeCallback={selectedValuesHandler} />\n    </Box>\n  );\n};\n\nexport default () => {\n  return (\n    <Provider value={client}>\n      <Metrics />\n    </Provider>\n  );\n};\n","import React from 'react';\nimport { CartesianGrid, Line, LineChart, ResponsiveContainer, Tooltip, XAxis, YAxis } from 'recharts';\n\nimport { MeasurementsChartItem, MetricLine } from '../Features/Metrics/Interfaces';\n\ntype MeasurementsChartProps = {\n  data: MeasurementsChartItem[];\n  metricUnits: MetricLine[];\n};\n\ninterface CustomTooltipInterface {\n  active?: boolean;\n  payload?: any[];\n}\n\nconst CustomTooltip = ({ active, payload }: CustomTooltipInterface) => {\n  if (active && payload && payload.length) {\n    const date = new Date(payload[0].payload.milliseconds).toUTCString();\n    const metricPelements: JSX.Element[] = [];\n    payload.forEach((point) => {\n      const metricLabel = `${point.name}: ${point.value}`;\n      metricPelements.push(\n        <p style={{ margin: '0px 0px', color: point.color }} key={point.name}>\n          {metricLabel}\n        </p>,\n      );\n    });\n    return (\n      <div style={{ backgroundColor: 'white', padding: '1% 5% 8%', borderRadius: '5px' }}>\n        <p>{`${date}`}</p>\n        {metricPelements.map((metric) => metric)}\n      </div>\n    );\n  }\n\n  return null;\n};\n\nCustomTooltip.defaultProps = {\n  active: false,\n  payload: [],\n};\n\nexport default ({ data, metricUnits }: MeasurementsChartProps) => {\n  metricUnits.forEach((unit) => {\n    unit.render = false;\n    // Getting all measures by unit (ie [123, 122, 111] for oilTemp)\n    const measuresByUnit = data?.map((metric) => {\n      return metric[unit.metric];\n    });\n    // Setting the minimum measure of every metric\n    unit.min = measuresByUnit.reduce((acc, curr) => (acc < curr ? acc : curr)) as number;\n  });\n\n  metricUnits.forEach((unit) => {\n    const metricsByUnit = metricUnits.filter((metric) => {\n      return metric.unit === unit.unit;\n    });\n\n    const min =\n      metricsByUnit?.length > 1\n        ? metricsByUnit?.reduce((acc, curr) => {\n            return acc.min < curr.min ? acc : curr;\n          })\n        : metricsByUnit[0];\n\n    const yAxisToHide = metricUnits.find((metric) => {\n      return metric.metric === min.metric && metric.unit === min.unit;\n    });\n    if (yAxisToHide) yAxisToHide.render = true;\n  });\n\n  return (\n    <ResponsiveContainer height={400}>\n      <LineChart\n        margin={{\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 15,\n        }}\n        data={data}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis interval=\"preserveStart\" dataKey=\"at\" dy={5} tickSize={4} tick={{ fontSize: 12 }} />\n        <Tooltip content={<CustomTooltip />} />\n        <Tooltip />\n        {metricUnits?.map((item, index) => (\n          <Line\n            stroke={item.color}\n            dot={false}\n            yAxisId={index}\n            isAnimationActive={false}\n            type=\"monotone\"\n            dataKey={item.metric}\n            key={`${item.metric}XAxis`}\n          />\n        ))}\n        {metricUnits?.map((item, index) => (\n          <YAxis\n            hide={!item.render}\n            tickCount={10}\n            label={{ value: item.unit, angle: -90, position: 'insideTopLeft' }}\n            yAxisId={index}\n            dx={-5}\n            key={`${item.metric}YAxis`}\n          />\n        ))}\n      </LineChart>\n    </ResponsiveContainer>\n  );\n};\n","import { Card, CardContent, Grid, makeStyles, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { LastMeasure } from '../Features/Metrics/Interfaces';\n\ntype MeasureCardProps = {\n  measure: LastMeasure;\n};\n\nconst useStyles = makeStyles({\n  cardsConteiner: {\n    paddingBottom: '1%',\n  },\n  cardContent: {\n    paddingTop: '2%',\n    paddingRight: '5%',\n    paddingBottom: '1%',\n    paddingLeft: '5%',\n    '&:last-child': {\n      paddingBottom: '0px',\n    },\n  },\n});\n\nconst MeasureCard = ({ measure }: MeasureCardProps) => {\n  const classes = useStyles();\n\n  return (\n    <Grid key={`grid_${measure.metric}`} xs={6} sm={4} md={3} item>\n      <Card>\n        <CardContent className={classes.cardContent}>\n          <Typography noWrap variant=\"subtitle1\">{`${measure.metric} (${measure.unit})`}</Typography>\n          <Typography style={{ color: `${measure.color}` }} variant=\"h4\">\n            {measure.lastMeasure}\n          </Typography>\n        </CardContent>\n      </Card>\n    </Grid>\n  );\n};\n\nexport default MeasureCard;\n","import { Typography, TypographyVariant } from '@material-ui/core';\nimport React from 'react';\n\ntype TypographyColor = 'initial' | 'inherit' | 'primary' | 'secondary' | 'textPrimary' | 'textSecondary' | 'error';\n\ninterface AlertParagraphProps {\n  headerVariant: TypographyVariant;\n  color: TypographyColor;\n  header: string;\n  body: string;\n  bodyVariant: TypographyVariant;\n}\n\nconst AlertParagraph = ({ bodyVariant, headerVariant, color, header, body }: AlertParagraphProps) => {\n  return (\n    <div>\n      <Typography variant={headerVariant} color={color}>\n        {header}\n      </Typography>\n      <Typography variant={bodyVariant}>{body}</Typography>\n    </div>\n  );\n};\n\nexport default AlertParagraph;\n","import { Dispatch, SetStateAction, useEffect, useState } from 'react';\nimport { LastMeasure, Metric } from '../Features/Metrics/Interfaces';\n\nimport { setDifference } from './utils';\n\nexport default function useSelectedMetricsWithLastMeasure(\n  selectedMetrics: Metric[],\n): [LastMeasure[], Dispatch<SetStateAction<LastMeasure[]>>] {\n  const [selectedMetricsWithLastMeasure, setSelectedMetricsWithLastMeasure] = useState<LastMeasure[]>(\n    selectedMetrics.map((metric) => {\n      return {\n        metric: metric.metric,\n        lastMeasure: null,\n        unit: null,\n        color: metric.color,\n      };\n    }),\n  );\n\n  useEffect(() => {\n    // We need to listen changes from selectedMetrics to remove Cards when user unselect a metric.\n    if (selectedMetrics.length < selectedMetricsWithLastMeasure.length) {\n      const selectedMetricsStrings = selectedMetrics.map((metric) => metric.metric);\n      const selectedMetricsWithLastMeasureStrings = selectedMetricsWithLastMeasure.map((metric) => metric.metric);\n      const selectedMetricsSet = new Set(selectedMetricsStrings);\n      const selectedMetricsWithLastMeasureSet = new Set(selectedMetricsWithLastMeasureStrings);\n      const removedElementAsSet = setDifference(selectedMetricsWithLastMeasureSet, selectedMetricsSet);\n      const metricToRemove = [...removedElementAsSet][0];\n      setSelectedMetricsWithLastMeasure(\n        selectedMetricsWithLastMeasure.filter((metric) => metric.metric !== metricToRemove),\n      );\n    }\n  }, [selectedMetrics]);\n\n  return [selectedMetricsWithLastMeasure, setSelectedMetricsWithLastMeasure];\n}\n","import { Box, CircularProgress, Container, Grid, makeStyles, Typography } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Provider, useQuery, useSubscription } from 'urql';\nimport Metrics from '../Features/Metrics/Metrics';\nimport { IState } from '../store';\nimport MeasurementsChart from './MeasurementsChart';\nimport { MeasurementsChartItem, MetricLine } from '../Features/Metrics/Interfaces';\nimport { createChartDataItems, createMetricUnitsArray, filterNewMeasurement, graphqlClient } from '../utils/utils';\nimport MeasureCard from './MeasureCard';\nimport AlertParagraph from './AlertParagraph';\nimport useSelectedMetricsWithLastMeasure from '../utils/CustomHooks';\n\nconst newMeasurementSub = `\n  subscription NewMeasurementSub {\n    newMeasurement {\n      metric\n      value\n      unit\n      at\n    }\n  }\n`;\n\nconst getSelectedMetrics = (state: IState) => {\n  const { selectedMetrics } = state.metrics;\n  return {\n    selectedMetrics,\n  };\n};\n\nconst getMultipleMeasurementsQuery = `\n  query ($input: [MeasurementQuery]) {\n    getMultipleMeasurements(input: $input) {\n      metric\n      measurements {\n        metric\n        unit\n        value\n        at\n      }\n    }\n  }\n`;\n\nconst useGetMultipleMeasurements = (input: { metricName: string }[]) => {\n  const [getMultipleMeasurementsQueryResult] = useQuery({\n    query: getMultipleMeasurementsQuery,\n    variables: {\n      input,\n    },\n  });\n  return getMultipleMeasurementsQueryResult;\n};\n\nconst useStyles = makeStyles({\n  cardsConteiner: {\n    paddingBottom: '1%',\n  },\n  dashboardContainer: {\n    height: '100%',\n  },\n});\n\nlet batch: MeasurementsChartItem = {\n  id: new Date().getTime(),\n  at: '',\n  milliseconds: 0,\n};\n\nconst Dashboard = () => {\n  const classes = useStyles();\n  const [newMeasurementsSubResult] = useSubscription({ query: newMeasurementSub });\n  const [chartData, setChartData] = useState<MeasurementsChartItem[]>([]);\n  const [metricUnits, setMetricUnits] = useState<MetricLine[]>([]);\n  const { selectedMetrics } = useSelector(getSelectedMetrics);\n  const multipleMeasurementsInput = selectedMetrics.map((metric) => {\n    return { metricName: metric.metric };\n  });\n  const [selectedMetricsWithLastMeasure, setSelectedMetricsWithLastMeasure] = useSelectedMetricsWithLastMeasure(\n    selectedMetrics,\n  );\n  const {\n    data: measurementsResponse,\n    fetching: fetchingMeasurements,\n    error: measurementsError,\n  } = useGetMultipleMeasurements(multipleMeasurementsInput);\n  let multipleMeasurementsResult = measurementsResponse;\n  const { data: subscriptionResponse, error: subscriptionError } = newMeasurementsSubResult;\n\n  useEffect(() => {\n    multipleMeasurementsResult = multipleMeasurementsResult?.getMultipleMeasurements;\n    setMetricUnits(createMetricUnitsArray(multipleMeasurementsResult));\n\n    setChartData(createChartDataItems(multipleMeasurementsResult, 1000));\n  }, [multipleMeasurementsResult]);\n\n  useEffect(() => {\n    if (subscriptionResponse) {\n      const newMetric = subscriptionResponse.newMeasurement;\n      const date = new Date(newMetric?.at);\n\n      if (!batch[newMetric.metric]) {\n        batch[newMetric.metric] = newMetric.value;\n        batch.milliseconds = newMetric.at;\n        batch.at = `${date.getUTCHours()}:${date.getUTCMinutes()}`;\n\n        const newMetricInCurrentSelection = selectedMetrics.find((metric) => metric.metric === newMetric.metric);\n        const currentMetricLastMeasure = selectedMetricsWithLastMeasure.find(\n          (metric) => metric.metric === newMetric.metric,\n        );\n\n        if (newMetricInCurrentSelection) {\n          if (currentMetricLastMeasure) {\n            const indexOfCurrentLastMeasure = selectedMetricsWithLastMeasure.indexOf(currentMetricLastMeasure);\n            const selectedMetricsWithLastMeasureReplacement = [...selectedMetricsWithLastMeasure];\n            selectedMetricsWithLastMeasureReplacement.splice(indexOfCurrentLastMeasure, 1, {\n              lastMeasure: newMetric.value,\n              metric: newMetric.metric,\n              unit: newMetric.unit,\n              color: currentMetricLastMeasure.color,\n            });\n            setSelectedMetricsWithLastMeasure(selectedMetricsWithLastMeasureReplacement);\n          } else {\n            setSelectedMetricsWithLastMeasure([\n              ...selectedMetricsWithLastMeasure,\n              {\n                lastMeasure: newMetric.value,\n                metric: newMetric.metric,\n                unit: newMetric.unit,\n                color: newMetricInCurrentSelection.color,\n              },\n            ]);\n          }\n        }\n      } else {\n        const newChartData = filterNewMeasurement(chartData, batch, selectedMetrics);\n        if (newChartData.length !== chartData.length) setChartData(newChartData.slice());\n        batch = { id: new Date().getTime(), at: '', milliseconds: 0 };\n      }\n    }\n  }, [subscriptionResponse]);\n\n  const chart = measurementsError ? (\n    <AlertParagraph\n      bodyVariant=\"body1\"\n      body={measurementsError.message}\n      color=\"error\"\n      headerVariant=\"h6\"\n      header=\"Error while getting multiple measurements:\"\n    />\n  ) : (\n    <MeasurementsChart metricUnits={metricUnits} data={chartData} />\n  );\n\n  const showLoading = fetchingMeasurements ? <CircularProgress /> : chart;\n\n  const subscriptionLayout = subscriptionError ? (\n    <AlertParagraph\n      bodyVariant=\"body1\"\n      body={subscriptionError.message}\n      color=\"error\"\n      headerVariant=\"h6\"\n      header=\"Error while getting real time last measures:\"\n    />\n  ) : (\n    <Grid container spacing={2} className={classes.cardsConteiner}>\n      {selectedMetricsWithLastMeasure.map((measure) => {\n        return <MeasureCard measure={measure} key={measure.metric} />;\n      })}\n    </Grid>\n  );\n\n  return (\n    <Container className={classes.dashboardContainer} maxWidth=\"lg\">\n      <Box sx={{ padding: '2% 0%', textAlign: 'center' }}>\n        <Typography variant=\"h6\">EOG Task</Typography>\n        <Typography variant=\"subtitle1\">Select some metrics to get started:</Typography>\n      </Box>\n      <Metrics />\n      {subscriptionLayout}\n      <Box pt={2} pb={3} alignItems=\"center\" justifyContent=\"center\" display=\"flex\">\n        {selectedMetrics.length !== 0 && showLoading}\n      </Box>\n    </Container>\n  );\n};\n\nexport default () => {\n  return (\n    <Provider value={graphqlClient}>\n      <Dashboard />\n    </Provider>\n  );\n};\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { ToastContainer } from 'react-toastify';\nimport { MuiThemeProvider, createTheme } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport createStore from './store';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Header from './components/Header';\nimport Wrapper from './components/Wrapper';\n// import NowWhat from './components/NowWhat';\nimport Dashboard from './components/Dashboard';\n\nconst store = createStore();\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: 'rgb(39,49,66)',\n    },\n    secondary: {\n      main: 'rgb(197,208,222)',\n    },\n    background: {\n      default: 'rgb(226,231,238)',\n    },\n  },\n});\n\nconst App = () => (\n  <MuiThemeProvider theme={theme}>\n    <CssBaseline />\n    <Provider store={store}>\n      <Wrapper>\n        <>\n          <Header />\n          {/* <NowWhat /> */}\n          <ToastContainer />\n          <Dashboard />\n        </>\n      </Wrapper>\n    </Provider>\n  </MuiThemeProvider>\n);\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(App(), document.getElementById('root'));\n"],"sourceRoot":""}